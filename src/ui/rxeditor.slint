import { Button, ScrollView, TextEdit, HorizontalBox} from "std-widgets.slint";

component mymenu inherits Rectangle {
    in property <string> text;
    in property <length> mHeight;
    in-out property <bool> enabled;
    height: mHeight;
    callback menuClicked();

    item := VerticalLayout{
          alignment: space-around;
          Text {
              font-size: 12px;
              text: text; color:
              root.enabled ? white : grey;
          }
    }

    touch := TouchArea{
        height: root.mHeight;
        width: root.width;
        clicked => {menuClicked()}
    }

}
export global TextContent {
    callback text_editted(string);
    in-out property <string> content;
    in-out property <string> word_count;
}

export global TabManager {
    callback new-tab();
    callback switch-tab(int);
    in-out property <int> current-tab-index;
}

// menu callbacks
export global MenuCallback {
    callback new();
    callback save();
    callback save_as();
    callback open();
    callback redo();
    callback undo();
}

export component RxTextEdittor inherits Window {
    in-out property <int> word_count;
    in-out property <string> content;
    in-out property <bool> undo_enabled: false;
    in-out property <bool> redo_enabled: false;
    in-out property <[string]> tab-titles: [
        "output", "input", "text0", "text1"
    ];
    callback button_clicked;
    min-width: 520px;
    min-height: 480px;
    VerticalLayout {
        width: parent.width - 2px;
        height: parent.height - 2px;

        // Menu Bar
        menubar := Rectangle{
            height: 48px;
            background: #3d3d3d;
            HorizontalLayout {
                alignment: space-around;
                doBtn := HorizontalLayout {
                    alignment: end;
                    spacing: 20px;
                    undo := mymenu {
                        text: "Undo";
                        mHeight: parent.height;
                        enabled: root.undo_enabled;
                        menuClicked => {MenuCallback.undo(); textinput.text = root.content;}
                    }
                    redo := mymenu {
                        text: "Redo"; mHeight: parent.height;
                        enabled: root.redo_enabled;
                        menuClicked => {MenuCallback.redo(); textinput.text = root.content;}
                    }
                }
                menuitem := HorizontalLayout {
                    spacing: 20px;
                    alignment: end;
                    padding-right: -20px;
                    mymenu {text: "New"; mHeight: parent.height; enabled: true; menuClicked => {button_clicked(); TabManager.new-tab()}}
                    mymenu {
                        text: "Save";
                        mHeight: parent.height;
                        enabled: true;
                        menuClicked => {MenuCallback.save()}
                    }
                    mymenu {
                        text: "Open";
                        mHeight: parent.height;
                        enabled: true;
                        menuClicked => {

                            MenuCallback.open();
                            textinput.text = root.content;
                            }
                    }
                    mymenu {text: "Save as"; mHeight: parent.height; enabled: true; menuClicked => {MenuCallback.save_as()}}
                }
            }

        }

        HorizontalLayout {
            number_tab := Rectangle {
                background: green;
                width: 30px;
            }
            VerticalLayout {
                alignment: space-between;
                tabs := HorizontalLayout {
                    spacing: 1px;
                    height: 24px;
                    // start tabs
                    for tab[i] in root.tab-titles: Rectangle{
                         max-height: parent.height;
                         background: #5f5f5f;
                         max-width: (root.width - number-tab.width)/3;//TabManager.tab_titles.length - TabManager.tab_titles.length * 2px - number-tab.width;
                         TouchArea {
                             Text {
                                  text: root.tab-titles[i];
                                  color: i == TabManager.current-tab-index ? white : grey;
                             }
                             clicked => {TabManager.switch-tab(i);}
                         }
                    }
                    // end tabs
                }
                textinput := TextEdit {
                     width: root.width - number-tab.width - 2px;
                     height: root.height - (menubar.height + statusbar.height + tabs.height);
                     preferred-height: 300px;
                     wrap: no-wrap;
                     edited(text) => {
                        root.content = text;
                        TextContent.text_editted(text);
                     }
                }
            }

        }

        statusbar := Rectangle{
            height: 30px;
            background: #2d2d2d;
            HorizontalLayout {
                mymenu {text:": words";}
            }
        }
    }
}